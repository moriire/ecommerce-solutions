services:
  web:
    container_name: ecs_backend
    build: ./ecommerce-solutions
    command: gunicorn ecs.wsgi:application --config gunicorn.py
    volumes:
      - 'static_volume:/home/backend/staticfiles'
      - 'media_volume:/home/backend/mediafiles'
      - '.ecommerce-solutions/:/backend'
      - './ecommerce-solutions/logs:/home/backend/logs'
    expose:
      - 8000
    restart: on-failure
    networks:
      - ecs_network
    env_file:
      - ./.env.web
    depends_on:
      db:
        condition: service_healthy

  frontend:
    container_name: ecs_frontend
    build: ./frontend
    volumes:
      - ./frontend:/app
    networks:
      - ecs_network
    depends_on:
      - db
      - web
    environment:
      - NODE_ENV=production

  nginx_backend:
    build: ./ecommerce-solutions/nginx
    container_name: nginx_backend
    ports:
      - "1337:80"
    volumes:
      - 'static_volume:/home/backend/staticfiles'
      - 'media_volume:/home/backend/mediafiles'
    depends_on:
      - web
    networks:
      - ecs_network

  nginx_frontend:
    image: nginx:alpine
    container_name: nginx_frontend
    ports:
      - "80:80"
    volumes:
     - ./frontend/nginx/default.conf:/etc/nginx/conf.d/default.conf
     - ./frontend/dist:/usr/share/nginx/html
    depends_on:
      - frontend
    networks:
      - ecs_network
  db:
    container_name: ecs_database
    image: postgres:16.0-alpine
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "ecs" ]
      interval: 5s
      timeout: 5s
      retries: 5
    env_file:
      - ./.env.db
    ports:
      - "5432:5432"
    networks:
      - ecs_network
    volumes:
      - 'db_data:/var/lib/postgresql/data/'

  redis:
    image: "redis:alpine"
    networks:
      - ecs_network

networks:
  ecs_network:
    driver: bridge

volumes:
  db_data:
  static_volume:
  media_volume: